from numpy import sin, arange, pi
from scipy.signal import lfilter, firwin
from pylab import figure, plot, grid, show

# ------------------------------------------------
# Create a signal for demonstration.
# ------------------------------------------------
# 320 samples of (1000Hz + 15000 Hz) at 48 kHz
sample_rate = 48000.0
nsamples = 320

""" 
F_1KHz = 1000.
A_1KHz = 1.0
 
F_15KHz = 15000.
A_15KHz = 0.5
"""
t = arange(nsamples) / sample_rate
""" 
signal = A_1KHz * sin(2*pi*F_1KHz*t) + A_15KHz*sin(2*pi*F_15KHz*t) """

signal = [
    -75.000000,
    -86.000000,
    -79.000000,
    -69.000000,
    -79.000000,
    -58.000000,
    -92.000000,
    -88.000000,
    -73.000000,
    -82.000000,
    -80.000000,
    -78.000000,
    -83.000000,
    -77.000000,
    -91.000000,
    -34.000000,
    -134.000000,
    -8.000000,
    -29.000000,
    -47.000000,
    -18.000000,
    -38.000000,
    -28.000000,
    -31.000000,
    -36.000000,
    -30.000000,
    -37.000000,
    -38.000000,
    -38.000000,
    -31.000000,
    -35.000000,
    -33.000000,
    -38.000000,
    -31.000000,
    -28.000000,
    -29.000000,
    -34.000000,
    -35.000000,
    -31.000000,
    -33.000000,
    -29.000000,
    -36.000000,
    -34.000000,
    -42.000000,
    -40.000000,
    -25.000000,
    -35.000000,
    -39.000000,
    -63.000000,
    -92.000000,
    -138.000000,
    -87.000000,
    -98.000000,
    -127.000000,
    -108.000000,
    -87.000000,
    -47.000000,
    -46.000000,
    -14.000000,
    -36.000000,
    -67.000000,
    -109.000000,
    -105.000000,
    71.000000,
    174.000000,
    262.000000,
    363.000000,
    486.000000,
    445.000000,
    305.000000,
    277.000000,
    193.000000,
    -137.000000,
    -9.000000,
    -82.000000,
    -75.000000,
    -79.000000,
    -44.000000,
    -35.000000,
    -25.000000,
    -47.000000,
    -53.000000,
    -89.000000,
    -75.000000,
    -106.000000,
    -82.000000,
    -204.000000,
    -130.000000,
    -140.000000,
    -162.000000,
    -124.000000,
    -111.000000,
    -93.000000,
    -68.000000,
    -19.000000,
    -58.000000,
    -42.000000,
    -60.000000,
    -12.000000,
    -31.000000,
    -109.000000,
    -97.000000,
    -76.000000,
    36.000000,
    111.000000,
    236.000000,
    378.000000,
    369.000000,
    297.000000,
    212.000000,
    97.000000,
    14.000000,
    -84.000000,
    -157.000000,
    -101.000000,
    -129.000000,
    -105.000000,
    -98.000000,
    -95.000000,
    -50.000000,
    -53.000000,
    -36.000000,
    -71.000000,
    -50.000000,
    -39.000000,
    -64.000000,
    -72.000000,
    -79.000000,
    -76.000000,
    -81.000000,
    -83.000000,
    -69.000000,
    -58.000000,
    -49.000000,
    -219.000000,
    19.000000,
    -80.000000,
    -73.000000,
    -98.000000,
    -62.000000,
    -94.000000,
    -110.000000,
    -45.000000,
    -196.000000,
    -120.000000,
    -136.000000,
    -125.000000,
    -44.000000,
    -51.000000,
    0.000000,
    8.000000,
    -33.000000,
    -50.000000,
    -38.000000,
    -35.000000,
    -78.000000,
    2.000000,
    -33.000000,
    -71.000000,
    -44.000000,
    -22.000000,
    -15.000000,
    14.000000,
    -17.000000,
    15.000000,
    12.000000,
    -16.000000,
    -33.000000,
    -26.000000,
    -5.000000,
    -4.000000,
    -2.000000,
    2.000000,
    91.000000,
    138.000000,
    172.000000,
    211.000000,
    166.000000,
    39.000000,
    -10.000000,
    -10.000000,
    -91.000000,
    -48.000000,
    -75.000000,
    -22.000000,
    -67.000000,
    3.000000,
    -54.000000,
    -49.000000,
    -77.000000,
    -90.000000,
    -106.000000,
    -144.000000,
    -66.000000,
    -134.000000,
    -86.000000,
    -121.000000,
    -53.000000,
    -23.000000,
    -169.000000,
    -275.000000,
    99.000000,
    -273.000000,
    -121.000000,
    194.000000,
    -28.000000,
    -147.000000,
    -37.000000,
    94.000000,
    167.000000,
    -97.000000,
    -217.000000,
    -216.000000,
    -227.000000,
    -86.000000,
    48.000000,
    -73.000000,
    66.000000,
    -8.000000,
    66.000000,
    222.000000,
    195.000000,
    102.000000,
    -82.000000,
    -323.000000,
    -54.000000,
    -227.000000,
    -104.000000,
    -94.000000,
    43.000000,
    89.000000,
    27.000000,
    -59.000000,
    -132.000000,
    16.000000,
    98.000000,
    -144.000000,
    30.000000,
    -132.000000,
    -292.000000,
    -176.000000,
    -214.000000,
    -226.000000,
    -79.000000,
    -127.000000,
    -71.000000,
    -149.000000,
    -166.000000,
    -13.000000,
    -32.000000,
    -118.000000,
    -61.000000,
    -95.000000,
    -119.000000,
    -89.000000,
    -105.000000,
    -37.000000,
    -49.000000,
    -79.000000,
    -36.000000,
    -92.000000,
    -4.000000,
    -40.000000,
    -15.000000,
    -14.000000,
    -12.000000,
    -24.000000,
    -21.000000,
    -10.000000,
    -47.000000,
    -80.000000,
    -10.000000,
    -131.000000,
    -28.000000,
    163.000000,
    110.000000,
    77.000000,
    101.000000,
    -66.000000,
    -281.000000,
    -65.000000,
    -100.000000,
    59.000000,
    -68.000000,
    -1.000000,
    -143.000000,
    -217.000000,
    -33.000000,
    47.000000,
    11.000000,
    164.000000,
    0.000000,
    76.000000,
    55.000000,
    -30.000000,
    48.000000,
    -298.000000,
    -104.000000,
    -77.000000,
    -8.000000,
    -206.000000,
    -203.000000,
    -184.000000,
    -148.000000,
    -44.000000,
    33.000000,
    -20.000000,
    2.000000,
    34.000000,
    -152.000000,
    -99.000000,
    -466.000000,
    -360.000000,
    -135.000000,
    96.000000,
    206.000000,
    146.000000,
    12.000000,
    10.000000,
    30.000000,
]

stm_out = [
    0.136689,
    0.275832,
    0.280541,
    -0.026131,
    -0.670117,
    -1.395223,
    -1.366931,
    0.088084,
    2.888910,
    5.595809,
    5.479769,
    -0.202620,
    -12.591599,
    -30.244080,
    -49.388123,
    -65.786972,
    -76.172134,
    -80.530327,
    -80.523376,
    -78.961708,
    -78.028954,
    -78.247482,
    -79.162567,
    -80.088272,
    -80.840370,
    -81.593735,
    -82.150421,
    -81.569519,
    -78.433159,
    -71.895668,
    -62.093639,
    -50.667873,
    -39.987206,
    -32.180321,
    -28.140535,
    -27.599911,
    -29.231178,
    -31.584051,
    -33.674625,
    -35.058445,
    -35.794556,
    -36.064789,
    -35.970802,
    -35.528645,
    -34.657681,
    -33.793037,
    -32.716724,
    -31.904509,
    -31.402014,
    -31.104546,
    -31.040834,
    -31.404514,
    -32.265026,
    -33.576302,
    -34.950130,
    -35.575001,
    -34.798141,
    -32.785576,
    -31.117834,
    -32.174908,
    -38.225357,
    -50.200668,
    -67.102661,
    -86.417419,
    -104.192795,
    -116.370903,
    -119.483032,
    -111.667892,
    -93.725197,
    -70.476997,
    -50.418945,
    -41.952732,
    -48.680347,
    -66.903130,
    -82.674911,
    -77.723648,
    -36.429115,
    45.988949,
    159.497955,
    280.689819,
    380.240631,
    432.111877,
    422.747070,
    355.177216,
    247.669815,
    127.064323,
    20.358850,
    -53.994499,
    -89.669319,
    -92.430611,
    -75.735809,
    -54.096550,
    -38.048958,
    -32.628704,
    -37.735054,
    -50.388103,
    -67.492317,
    -86.888191,
    -107.137970,
    -126.189072,
    -141.797699,
    -151.929443,
    -153.571442,
    -146.380951,
    -131.175385,
    -110.658188,
    -87.986916,
    -65.875946,
    -46.784824,
    -33.500427,
    -29.141350,
    -36.416412,
    -54.688789,
    -77.766579,
    -93.180878,
    -85.410904,
    -42.134178,
    37.939720,
    141.861847,
    244.771637,
    318.136566,
    340.350159,
    305.076477,
    222.848526,
    116.253487,
    11.401369,
    -71.281670,
    -121.608231,
    -140.352554,
    -135.573624,
    -117.695724,
    -96.009178,
    -76.400108,
    -61.706371,
    -51.999607,
    -47.412853,
    -46.897411,
    -50.054279,
    -55.889660,
    -63.035564,
    -69.504654,
    -73.993073,
    -76.345703,
    -76.822380,
    -77.315598,
    -78.503464,
    -80.388924,
    -82.106911,
    -82.164146,
    -80.083061,
    -76.302887,
    -72.625931,
    -71.532005,
    -75.499344,
    -85.815666,
    -101.443771,
    -118.984673,
    -132.422562,
    -135.615372,
    -124.867516,
    -100.970467,
    -69.798187,
    -40.253731,
    -20.472353,
    -13.392710,
    -17.666307,
    -27.577065,
    -37.441311,
    -43.796894,
    -46.382484,
    -46.405487,
    -44.758141,
    -41.539310,
    -35.394379,
    -25.939953,
    -14.371989,
    -3.470149,
    3.569576,
    5.037889,
    0.699599,
    -8.002430,
    -18.240358,
    -26.699141,
    -28.763998,
    -19.503040,
    5.444282,
    45.545918,
    94.520935,
    139.930420,
    167.329834,
    166.066101,
    134.447937,
    80.835426,
    20.432253,
    -30.609644,
    -61.928165,
    -71.141823,
    -63.757641,
    -49.130611,
    -36.330837,
    -31.685837,
    -38.223057,
    -53.025509,
    -73.116119,
    -93.617477,
    -108.400719,
    -114.088524,
    -110.475304,
    -100.597672,
    -90.691597,
    -87.141701,
    -93.325485,
    -107.089455,
    -121.044479,
    -127.601486,
    -121.672783,
    -102.710854,
    -74.046364,
    -39.762421,
    -5.466760,
    21.399462,
    32.031574,
    18.933220,
    -19.310442,
    -73.610809,
    -127.875069,
    -162.611832,
    -166.593445,
    -138.904343,
    -87.485802,
    -22.809742,
    42.902351,
    100.277611,
    138.233780,
    143.340836,
    107.824356,
    36.019676,
    -54.133610,
    -133.163849,
    -174.966690,
    -168.541977,
    -122.896225,
    -62.278526,
    -12.186384,
    13.415370,
    15.165295,
    5.274495,
    -5.282315,
    -13.317288,
    -24.332672,
    -47.458481,
    -86.596977,
    -135.339264,
    -179.802002,
    -205.279068,
    -206.297913,
    -186.740967,
    -157.696564,
    -129.772903,
    -108.842560,
    -94.773460,
    -85.304787,
    -78.791367,
    -75.719070,
    -77.432739,
    -83.831192,
    -90.812462,
    -94.599892,
    -92.445114,
    -84.340874,
    -73.768944,
    -64.363525,
    -57.108711,
    -51.881725,
    -46.599312,
    -39.543575,
    -30.546146,
    -20.666288,
    -12.031802,
    -7.426283,
    -10.264128,
    -21.949804,
    -41.047340,
    -60.055592,
    -68.384773,
    -55.405807,
    -19.160423,
    29.711580,
    71.406807,
    85.505295,
    62.847523,
    12.329054,
    -44.299374,
    -83.917084,
    -95.486679,
    -85.450584,
    -69.957642,
    -65.008591,
    -73.404945,
    -84.963295,
    -83.373787,
    -59.185043,
    -14.430122,
    36.797203,
    75.228989,
    86.977188,
    69.232941,
    29.411705,
    -18.705040,
    -61.161377,
    -92.413742,
    -112.517021,
    -128.308960,
    -144.146576,
    -159.361404,
    -166.113983,
    -153.466980,
    -115.848183,
    -59.618408,
    -3.839304,
]

# ------------------------------------------------
# Create a FIR filter and apply it to signal.
# ------------------------------------------------
# The Nyquist rate of the signal.
nyq_rate = sample_rate / 2.0

# The cutoff frequency of the filter: 6KHz
cutoff_hz = 6000.0

# Length of the filter (number of coefficients, i.e. the filter order + 1)
numtaps = 29

# Use firwin to create a lowpass FIR filter
fir_coeff = firwin(numtaps, cutoff_hz / nyq_rate)

# Use lfilter to filter the signal with the FIR filter
filtered_signal = lfilter(fir_coeff, 1.0, signal)

# ------------------------------------------------
# Plot the original and filtered signals.
# ------------------------------------------------

# The first N-1 samples are "corrupted" by the initial conditions
warmup = numtaps - 1

# The phase delay of the filtered signal
delay = (warmup / 2) / sample_rate

figure(1)
# Plot the original signal
plot(t, signal)

# Plot the filtered signal, shifted to compensate for the phase delay
plot(t - delay, filtered_signal, "r-")

# Plot just the "good" part of the filtered signal.  The first N-1
# samples are "corrupted" by the initial conditions.
plot(t[warmup:] - delay, filtered_signal[warmup:], "g", linewidth=4)

grid(True)

show()

# ------------------------------------------------
# Print values
# ------------------------------------------------


def print_values(label, values):
    var = "float32_t %s[%d]" % (label, len(values))
    print("%-30s = {%s}" % (var, ", ".join(["%+.10f" % x for x in values])))


print("======SIGNAL======")
# print_values('signal', signal)
print("======FIR COEFF======")
# print_values('fir_coeff', fir_coeff)
print("======FILTERED SIGNAL======")
# print_values('filtered_signal', filtered_signal)


import numpy as np

stm_out = np.array(stm_out)
filtered_signal = np.array(filtered_signal)
print(np.sum(stm_out - filtered_signal))
